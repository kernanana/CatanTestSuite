plugins {
    id 'java'
    id "com.github.spotbugs" version "5.0.13"
    id 'checkstyle'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.9.11'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

//apply plugin: 'info.solidsoft.pitest'

checkstyle {
    checkstyleTest.enabled = false
    // Configure Checkstyle suppression
    configProperties = [
            "suppressionsFile": file('checkstyle-suppressions.xml').absolutePath
    ]
}

group 'edu.rose-hulman.csse'
version '1.0'

repositories {
    mavenCentral()
}

pitest {
    targetClasses = ['domain.*','player.*']  //by default "${project.group}.*"
    pitestVersion = '1.10.3' //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    junit5PluginVersion = '1.0.0'
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugsMain.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugsTest.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // https://mvnrepository.com/artifact/org.easymock/easymock
    testImplementation group: 'org.easymock', name: 'easymock', version: '4.3'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."

     def parser = new XmlParser()
     parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
false);
     parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
     parser.setFeature("http://xml.org/sax/features/namespaces", false)

        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)